// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name DuChatBot
// swift-module-flags-ignorable: -enable-bare-slash-regex
import BSChatBotClient
@_exported import DuChatBot
import Foundation
import Swift
import _Concurrency
import _StringProcessing
public struct DuTextParseResult {
  public let value: Swift.String
  public let suggestedActions: [DuChatBot.DuChatBotSuggestedAction]
  public let watermark: Swift.Int?
  public let locale: DuChatBot.DuChatBotLocale
  public let parsedID: Swift.String
}
public struct DuChatBotTroubleTicket {
  public let number: Swift.String
  public let dateOfCreation: Swift.String
  public let accountNumber: Swift.String
  public let toBeResolvedIn: Swift.String
  public let status: Swift.String
}
public struct DuChatBotPackage : Swift.Decodable {
  public let value: Swift.String
  public let title: Swift.String
  public init(from decoder: Swift.Decoder) throws
}
@frozen public enum DuChatBotLocale : Swift.String, Swift.Codable {
  case en, ar
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct DuChatBotIdStatus {
  public var statusMessage: Swift.String {
    get
  }
  public var statusNumberMessage: Swift.String {
    get
  }
}
extension Swift.Array {
  public func chunked(into size: Swift.Int) -> [[Element]]
}
public enum DuChatBotParseResult {
  case text(result: DuChatBot.DuTextParseResult)
  case menu(result: DuChatBot.DuButtonsParseResult)
  case accounts(result: DuChatBot.DuObjectParseResult<[DuChatBot.DuChatBotAccount]>)
  case contracts(result: DuChatBot.DuObjectParseResult<[DuChatBot.DuChatBotContract]>)
  case recharge(result: DuChatBot.DuButtonsParseResult)
  case paymentHistory(result: DuChatBot.DuObjectParseResult<[DuChatBot.DuChatBotPaymentHistory]>)
  case rate(result: DuChatBot.DuTextParseResult)
  case confirmation(result: DuChatBot.DuButtonsParseResult)
  case inputFeedback(result: DuChatBot.DuTextParseResult)
  case payBill(result: DuChatBot.DuButtonsParseResult)
  case forgotIdStatus(result: DuChatBot.DuButtonsParseResult)
  case login(result: DuChatBot.DuButtonsParseResult)
  case forgotLoginDetails(result: DuChatBot.DuButtonsParseResult)
  case handover(result: DuChatBot.DuButtonsParseResult)
  case rechargeHistory(result: DuChatBot.DuObjectParseResult<[DuChatBot.DuChatBotRechargeHistory]>)
  case orders(result: DuChatBot.DuObjectParseResult<[DuChatBot.DuChatBotOrder]>)
  case vas(result: DuChatBot.DuObjectParseResult<[DuChatBot.DuChatBotVAS]>)
  case confirmVASUnsubscription(result: DuChatBot.DuConfirmVASUnsubscriptionParseResult)
  case termsAndConditions(result: DuChatBot.DuButtonsParseResult)
  case contactForm(result: DuChatBot.DuButtonsParseResult)
  case idStatus(result: DuChatBot.DuObjectParseResult<DuChatBot.DuChatBotIdStatus>)
  case myConsumption(result: DuChatBot.DuObjectParseResult<DuChatBot.DuChatBotAccountDetails>)
  case checkingAccount(result: DuChatBot.DuTextParseResult)
  case contractInactivePendingPayment(result: DuChatBot.DuButtonsParseResult)
  case contractInactiveIdExpiry(result: DuChatBot.DuObjectParseResult<DuChatBot.DuChatBotAccountDetails>)
  case contractInactivePendingPaymentIdExpiry(result: DuChatBot.DuButtonsParseResult)
  case mobileContractActive(result: DuChatBot.DuTextParseResult)
  case fixedContractActive(result: DuChatBot.DuTextParseResult)
  case bundleInactive(result: DuChatBot.DuButtonsParseResult)
  case bundleActive(result: DuChatBot.DuButtonsParseResult)
  case previouslySelectedAccount(result: DuChatBot.DuObjectParseResult<[DuChatBot.DuChatBotKeyValuePair]>)
  case selectCreditHighReason(result: DuChatBot.DuObjectParseResult<[DuChatBot.DuChatBotCreditIsHighReason]>)
  case billIsHigh(result: DuChatBot.DuObjectParseResult<DuChatBot.DuChatBotAccountDetails>)
  case creditUsage(result: DuChatBot.DuObjectParseResult<[[DuChatBot.DuChatBotKeyValuePair]]>)
  case billingDetails(result: DuChatBot.DuObjectParseResult<DuChatBot.DuChatBotAccountDetails>)
  case troubleTickets(result: DuChatBot.DuObjectParseResult<[DuChatBot.DuChatBotTroubleTicket]>)
  case troubleTicketDetails(result: DuChatBot.DuObjectParseResult<DuChatBot.DuChatBotTroubleTicketDetails>)
  case ticketNote(result: DuChatBot.DuTextParseResult)
  case changeOwnership(result: DuChatBot.DuButtonsParseResult)
  case buyDataBundle(result: DuChatBot.DuObjectParseResult<DuChatBot.DuChatBotAccountDetails>)
  case internetTroubleshoot(result: DuChatBot.DuObjectParseResult<DuChatBot.DuChatBotAccountDetails>)
  case upgradeDowngradePlan(result: DuChatBot.DuObjectParseResult<DuChatBot.DuChatBotAccountDetails>)
  case unbilledBalance(result: DuChatBot.DuObjectParseResult<[DuChatBot.DuChatBotKeyValuePair]>)
  case contractStatus(result: DuChatBot.DuObjectParseResult<[DuChatBot.DuChatBotKeyValuePair]>, status: DuChatBot.DuChatBotContractStatus)
  case renewableContract(result: DuChatBot.DuObjectParseResult<[DuChatBot.DuChatBotKeyValuePair]>)
  case renewableContracts(result: DuChatBot.DuObjectParseResult<[[DuChatBot.DuChatBotKeyValuePair]]>)
  case proceedWithRenewal(result: DuChatBot.DuObjectParseResult<[DuChatBot.DuChatBotKeyValuePair]>)
  case renewContract(result: DuChatBot.DuObjectParseResult<DuChatBot.DuChatBotAccountDetails>)
  case contractIssuePendingPayment(result: DuChatBot.DuButtonsParseResult)
  case contractIssueIdExpiry(result: DuChatBot.DuObjectParseResult<DuChatBot.DuChatBotAccountDetails>)
  case contractIssuePendingPaymentIdExpiry(result: DuChatBot.DuButtonsParseResult)
  case payFriendLink(result: DuChatBot.DuObjectParseResult<DuChatBot.DuChatBotAccountDetails>)
  case rechargeFriendLink(result: DuChatBot.DuObjectParseResult<DuChatBot.DuChatBotAccountDetails>)
  case purchaseICPLink(result: DuChatBot.DuObjectParseResult<DuChatBot.DuChatBotAccountDetails>)
  case marketingOffersLink(result: DuChatBot.DuObjectParseResult<DuChatBot.DuChatBotAccountDetails>)
  case scheduleStoreAppointmentLink(result: DuChatBot.DuObjectParseResult<DuChatBot.DuChatBotAccountDetails>)
  case homeRelocationBooking(result: DuChatBot.DuObjectParseResult<DuChatBot.DuChatBotAccountDetails>)
  case homeServiceCancellation(result: DuChatBot.DuObjectParseResult<DuChatBot.DuChatBotAccountDetails>)
  case purchaseRoamingBundle(result: DuChatBot.DuObjectParseResult<DuChatBot.DuChatBotAccountDetails>)
  case editContactDetails(result: DuChatBot.DuObjectParseResult<DuChatBot.DuChatBotAccountDetails>)
  case contactDetails(result: DuChatBot.DuObjectParseResult<[DuChatBot.DuChatBotKeyValuePair]>)
  case checkAppointmentTime(result: DuChatBot.DuObjectParseResult<DuChatBot.DuChatBotAccountDetails>)
  case homePlansTroubleshooting(result: DuChatBot.DuObjectParseResult<DuChatBot.DuChatBotAccountDetails>)
  case broadbandTroubleshooting(result: DuChatBot.DuObjectParseResult<DuChatBot.DuChatBotAccountDetails>)
  case TVPackagesTroubleshooting(result: DuChatBot.DuObjectParseResult<DuChatBot.DuChatBotAccountDetails>)
  case purchaseAddOnsManageCallerTunes(result: DuChatBot.DuObjectParseResult<DuChatBot.DuChatBotAccountDetails>)
  case purchaseAddOnsManageData(result: DuChatBot.DuObjectParseResult<DuChatBot.DuChatBotAccountDetails>)
  case purchaseAddOnsManageVAS(result: DuChatBot.DuObjectParseResult<DuChatBot.DuChatBotAccountDetails>)
  case sendTranscript(result: DuChatBot.DuObjectParseResult<DuChatBot.DuChatBotAccountDetails>)
  case decoders(result: DuChatBot.DuObjectParseResult<[DuChatBot.DuChatBotDecoder]>)
  case packages(result: DuChatBot.DuObjectParseResult<[DuChatBot.DuChatBotPackage]>)
  case tvChannelInfoLink(result: DuChatBot.DuObjectParseResult<DuChatBot.DuChatBotAccountDetails>)
  case purchaseAddOnsLink(result: DuChatBot.DuObjectParseResult<DuChatBot.DuChatBotAccountDetails>)
}
public struct DuChatBotConfirmVASUnsubscription {
  public let name: Swift.String
  public let mobileNumber: Swift.String
}
public struct DuChatBotCreditIsHighReason : Swift.Decodable {
  public let title: Swift.String
  public let value: Swift.String
  public init(from decoder: Swift.Decoder) throws
}
public struct DuChatBotVAS {
  public var id: Swift.String {
    get
  }
  public let name: Swift.String
  public let expiryDate: Swift.String
  public var price: Swift.Double {
    get
  }
}
public struct DuChatBotAccountDetails : Swift.Codable {
  public let customerCode: Swift.String
  public let msisdn: Swift.String
  public let contractCode: Swift.String?
  public let customerId: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DuChatBotDecoder {
  public let id: Swift.String
  public let text: Swift.String
}
public struct DuChatBotAccount : Swift.Decodable {
  public let customerCode: Swift.String
  public init(from decoder: Swift.Decoder) throws
}
public protocol DuParsingEngineDelegate : AnyObject {
  func parsingEngine(_ parsingEngine: DuChatBot.DuParsingEngine, didParseActivityWithResult result: DuChatBot.DuChatBotParseResult)
  func parsingEngine(_ parsingEngine: DuChatBot.DuParsingEngine, didFailToParseActivityWithError error: Swift.Error)
}
public class DuParsingEngine : BSChatBotClient.ParsingEngine {
  weak public var delegate: DuChatBot.DuParsingEngineDelegate?
  public init()
  public func parse(json: [Swift.String : Any], forId id: Swift.String, watermark: Swift.Int?)
  @objc deinit
}
@frozen public enum DuChatBotContractStatus {
  case active, inactive
  public static func == (a: DuChatBot.DuChatBotContractStatus, b: DuChatBot.DuChatBotContractStatus) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct DuChatBotButton : Swift.Decodable {
  public enum Style : Swift.String, Swift.Decodable {
    case primary
    case secondary
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public let id: Swift.String?
  public let title: Swift.String?
  public let data: Swift.String?
  public let style: DuChatBot.DuChatBotButton.Style?
  public init(from decoder: Swift.Decoder) throws
}
public struct DuButtonsParseResult {
  public let text: Swift.String
  public let buttons: [DuChatBot.DuChatBotButton]
  public let suggestedActions: [DuChatBot.DuChatBotSuggestedAction]
  public let watermark: Swift.Int?
  public let locale: DuChatBot.DuChatBotLocale
  public let parsedID: Swift.String
}
public enum DuChatBotConfigurator {
  public enum DuChatBotEnvironment {
    case devMajor
    case tqcMajor
    case previewMinor
    case previewMajor
    case production
    public static func == (a: DuChatBot.DuChatBotConfigurator.DuChatBotEnvironment, b: DuChatBot.DuChatBotConfigurator.DuChatBotEnvironment) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public static func configure(with environment: DuChatBot.DuChatBotConfigurator.DuChatBotEnvironment)
}
public struct DuChatBotContract {
  public struct Contract {
    public let name: Swift.String
    public let number: Swift.String
  }
  @frozen public enum `Type` {
    case mobile, fixed
    public static func == (a: DuChatBot.DuChatBotContract.`Type`, b: DuChatBot.DuChatBotContract.`Type`) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public let id: Swift.String
  public let parentContract: DuChatBot.DuChatBotContract.Contract
  public let childContracts: [DuChatBot.DuChatBotContract.Contract]
  public let type: DuChatBot.DuChatBotContract.`Type`
}
public struct DuConfirmVASUnsubscriptionParseResult {
  public let value: DuChatBot.DuChatBotConfirmVASUnsubscription
  public let buttons: [DuChatBot.DuChatBotButton]
  public let suggestedActions: [DuChatBot.DuChatBotSuggestedAction]
  public let watermark: Swift.Int?
  public let locale: DuChatBot.DuChatBotLocale
  public let parsedID: Swift.String
}
public struct DuChatBotOrder {
  public let number: Swift.String
  public let date: Swift.String
  public let status: Swift.String
}
public struct DuChatBotSuggestedAction : Swift.Codable {
  public let title: Swift.String
  public let value: Swift.String
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct DuChatBotRechargeHistory {
  public let amount: Swift.String
  public let source: Swift.String
  public let date: Swift.String
  public let time: Swift.String
}
public struct DuObjectParseResult<T> {
  public let text: Swift.String?
  public let value: T
  public let buttons: [DuChatBot.DuChatBotButton]
  public let suggestedActions: [DuChatBot.DuChatBotSuggestedAction]
  public let watermark: Swift.Int?
  public let locale: DuChatBot.DuChatBotLocale
  public let parsedID: Swift.String
}
public struct DuChatBotPaymentHistory {
  public let date: Swift.String
  public let source: Swift.String
  public let amount: Swift.String
}
public struct DuChatBotTroubleTicketDetails {
  public let number: Swift.String
  public let dateOfCreation: Swift.String
  public let subject: Swift.String
  public let areaName: Swift.String
  public let contractDetails: Swift.String
}
public struct DuChatBotKeyValuePairs {
  public let pairs: [DuChatBot.DuChatBotKeyValuePair]
}
public struct DuChatBotKeyValuePair {
  public var key: Swift.String {
    get
  }
  public let value: Swift.String
}
extension DuChatBot.DuChatBotLocale : Swift.Equatable {}
extension DuChatBot.DuChatBotLocale : Swift.Hashable {}
extension DuChatBot.DuChatBotLocale : Swift.RawRepresentable {}
extension DuChatBot.DuChatBotLocale : Swift.Sendable {}
extension DuChatBot.DuChatBotContractStatus : Swift.Equatable {}
extension DuChatBot.DuChatBotContractStatus : Swift.Hashable {}
extension DuChatBot.DuChatBotContractStatus : Swift.Sendable {}
extension DuChatBot.DuChatBotButton.Style : Swift.Equatable {}
extension DuChatBot.DuChatBotButton.Style : Swift.Hashable {}
extension DuChatBot.DuChatBotButton.Style : Swift.RawRepresentable {}
extension DuChatBot.DuChatBotConfigurator.DuChatBotEnvironment : Swift.Equatable {}
extension DuChatBot.DuChatBotConfigurator.DuChatBotEnvironment : Swift.Hashable {}
extension DuChatBot.DuChatBotContract.`Type` : Swift.Equatable {}
extension DuChatBot.DuChatBotContract.`Type` : Swift.Hashable {}
extension DuChatBot.DuChatBotContract.`Type` : Swift.Sendable {}
