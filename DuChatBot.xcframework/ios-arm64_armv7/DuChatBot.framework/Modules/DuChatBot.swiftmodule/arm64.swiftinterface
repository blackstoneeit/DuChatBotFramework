// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target arm64-apple-ios10.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name DuChatBot
import BSChatBotClient
@_exported import DuChatBot
import Foundation
import Swift
public enum DuChatBotParseResult {
  case text(value: Swift.String, suggestedActions: [DuChatBot.DuChatBotSuggestedAction], watermark: Swift.Int?)
  case menu(text: Swift.String, buttons: [DuChatBot.DuChatBotButton], suggestedActions: [DuChatBot.DuChatBotSuggestedAction], watermark: Swift.Int?)
  case accounts(accounts: [DuChatBot.DuChatBotAccount], suggestedActions: [DuChatBot.DuChatBotSuggestedAction], watermark: Swift.Int?)
  case contracts(text: Swift.String, contracts: [DuChatBot.DuChatBotContract], suggestedActions: [DuChatBot.DuChatBotSuggestedAction], watermark: Swift.Int?)
  case recharge(text: Swift.String, buttons: [DuChatBot.DuChatBotButton], suggestedActions: [DuChatBot.DuChatBotSuggestedAction], watermark: Swift.Int?)
  case paymentHistory(paymentHistory: [DuChatBot.DuChatBotPaymentHistory], suggestedActions: [DuChatBot.DuChatBotSuggestedAction], watermark: Swift.Int?)
  case rate(text: Swift.String, suggestedActions: [DuChatBot.DuChatBotSuggestedAction], watermark: Swift.Int?)
  case confirmation(text: Swift.String, buttons: [DuChatBot.DuChatBotButton], suggestedActions: [DuChatBot.DuChatBotSuggestedAction], watermark: Swift.Int?)
  case inputFeedback(text: Swift.String, suggestedActions: [DuChatBot.DuChatBotSuggestedAction], watermark: Swift.Int?)
  case payBill(text: Swift.String, buttons: [DuChatBot.DuChatBotButton], suggestedActions: [DuChatBot.DuChatBotSuggestedAction], watermark: Swift.Int?)
  case idStatus(text: Swift.String, buttons: [DuChatBot.DuChatBotButton], suggestedActions: [DuChatBot.DuChatBotSuggestedAction], watermark: Swift.Int?)
  case login(text: Swift.String, buttons: [DuChatBot.DuChatBotButton], suggestedActions: [DuChatBot.DuChatBotSuggestedAction], watermark: Swift.Int?)
  case forgotLoginDetails(text: Swift.String, buttons: [DuChatBot.DuChatBotButton], suggestedActions: [DuChatBot.DuChatBotSuggestedAction], watermark: Swift.Int?)
  case handover(text: Swift.String, buttons: [DuChatBot.DuChatBotButton], suggestedActions: [DuChatBot.DuChatBotSuggestedAction], watermark: Swift.Int?)
  case rechargeHistory(rechargeHistory: [DuChatBot.DuChatBotRechargeHistory], suggestedActions: [DuChatBot.DuChatBotSuggestedAction], watermark: Swift.Int?)
  case orders(orders: [DuChatBot.DuChatBotOrder], suggestedActions: [DuChatBot.DuChatBotSuggestedAction], watermark: Swift.Int?)
  case vas(vas: [DuChatBot.DuChatBotVAS], suggestedActions: [DuChatBot.DuChatBotSuggestedAction], watermark: Swift.Int?)
  case confirmVASUnsubscription(confirmVASUnsubscription: DuChatBot.DuChatBotConfirmVASUnsubscription, buttons: [DuChatBot.DuChatBotButton], suggestedActions: [DuChatBot.DuChatBotSuggestedAction], watermark: Swift.Int?)
}
public struct DuChatBotConfirmVASUnsubscription {
  public let name: Swift.String
  public let mobileNumber: Swift.String
}
public enum DuChatBotContractType : Swift.String, Swift.Codable {
  case prepaid
  case postpaid
  case home
  case unknown
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public struct DuChatBotVAS {
  public var id: Swift.String {
    get
  }
  public let name: Swift.String
  public let expiryDate: Swift.String
}
public struct DuChatBotContract : Swift.Decodable {
  public let title: Swift.String
  public let value: Swift.String
  public init(from decoder: Swift.Decoder) throws
}
public struct DuChatBotAccountContract {
  public let number: Swift.String
  public let name: Swift.String
  public let type: DuChatBot.DuChatBotContractType?
}
public struct DuChatBotAccount {
  public let customerCode: Swift.String
  public let contracts: [DuChatBot.DuChatBotAccountContract]
}
public protocol DuParsingEngineDelegate : AnyObject {
  func parsingEngine(_ parsingEngine: DuChatBot.DuParsingEngine, didParseActivityWithResult result: DuChatBot.DuChatBotParseResult)
  func parsingEngine(_ parsingEngine: DuChatBot.DuParsingEngine, didFailToParseActivityWithError error: Swift.Error)
}
public class DuParsingEngine : BSChatBotClient.ParsingEngine {
  weak public var delegate: DuChatBot.DuParsingEngineDelegate?
  public init()
  public func parse(json: [Swift.String : Any], forId id: Swift.String, watermark: Swift.Int?)
  @objc deinit
}
public struct DuChatBotButton : Swift.Decodable {
  public let id: Swift.String
  public let title: Swift.String?
  public let data: Swift.String?
  public init(from decoder: Swift.Decoder) throws
}
public enum DuChatBotConfigurator {
  public enum DuChatBotEnvironment {
    case tqc
    case previewMajor
    case previewMinor
    case production
    public static func == (a: DuChatBot.DuChatBotConfigurator.DuChatBotEnvironment, b: DuChatBot.DuChatBotConfigurator.DuChatBotEnvironment) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  public static func configure(with environment: DuChatBot.DuChatBotConfigurator.DuChatBotEnvironment)
}
public struct DuChatBotOrder {
  public let number: Swift.String
  public let date: Swift.String
  public let status: Swift.String
}
public struct DuChatBotSuggestedAction : Swift.Codable {
  public let title: Swift.String
  public let value: Swift.String
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct DuChatBotRechargeHistory {
  public let amount: Swift.String
  public let source: Swift.String
  public let date: Swift.String
  public let time: Swift.String
}
public struct DuChatBotPaymentHistory {
  public let date: Swift.String
  public let source: Swift.String
  public let amount: Swift.String
}
extension DuChatBot.DuChatBotContractType : Swift.Equatable {}
extension DuChatBot.DuChatBotContractType : Swift.Hashable {}
extension DuChatBot.DuChatBotContractType : Swift.RawRepresentable {}
extension DuChatBot.DuChatBotConfigurator.DuChatBotEnvironment : Swift.Equatable {}
extension DuChatBot.DuChatBotConfigurator.DuChatBotEnvironment : Swift.Hashable {}
