// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target armv7-apple-ios10.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name DuChatBot
import BSChatBotClient
@_exported import DuChatBot
import Foundation
import Swift
public struct DuTextParseResult {
  public let value: Swift.String
  public let suggestedActions: [DuChatBot.DuChatBotSuggestedAction]
  public let watermark: Swift.Int?
  public let locale: DuChatBot.DuChatBotLocale
}
public enum DuChatBotLocale : Swift.String, Swift.Codable {
  case en, ar
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public enum DuChatBotParseResult {
  case text(value: DuChatBot.DuTextParseResult)
  case menu(value: DuChatBot.DuButtonsParseResult)
  case accounts(value: DuChatBot.DuObjectParseResult<[DuChatBot.DuChatBotAccount]>)
  case contracts(value: DuChatBot.DuContractsParseResult)
  case recharge(value: DuChatBot.DuButtonsParseResult)
  case paymentHistory(value: DuChatBot.DuObjectParseResult<[DuChatBot.DuChatBotPaymentHistory]>)
  case rate(value: DuChatBot.DuTextParseResult)
  case confirmation(value: DuChatBot.DuButtonsParseResult)
  case inputFeedback(value: DuChatBot.DuTextParseResult)
  case payBill(value: DuChatBot.DuButtonsParseResult)
  case idStatus(value: DuChatBot.DuButtonsParseResult)
  case login(value: DuChatBot.DuButtonsParseResult)
  case forgotLoginDetails(value: DuChatBot.DuButtonsParseResult)
  case handover(value: DuChatBot.DuButtonsParseResult)
  case rechargeHistory(value: DuChatBot.DuObjectParseResult<[DuChatBot.DuChatBotRechargeHistory]>)
  case orders(value: DuChatBot.DuObjectParseResult<[DuChatBot.DuChatBotOrder]>)
  case vas(value: DuChatBot.DuObjectParseResult<[DuChatBot.DuChatBotVAS]>)
  case confirmVASUnsubscription(value: DuChatBot.DuConfirmVASUnsubscriptionParseResult)
}
public struct DuChatBotConfirmVASUnsubscription {
  public let name: Swift.String
  public let mobileNumber: Swift.String
}
public struct DuContractsParseResult {
  public let text: Swift.String
  public let value: [DuChatBot.DuChatBotContract]
  public let suggestedActions: [DuChatBot.DuChatBotSuggestedAction]
  public let watermark: Swift.Int?
  public let locale: DuChatBot.DuChatBotLocale
}
public enum DuChatBotContractType : Swift.String, Swift.Codable {
  case prepaid
  case postpaid
  case home
  case unknown
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public struct DuChatBotVAS {
  public var id: Swift.String {
    get
  }
  public let name: Swift.String
  public let expiryDate: Swift.String
}
public struct DuChatBotContract : Swift.Decodable {
  public let title: Swift.String
  public let value: Swift.String
  public init(from decoder: Swift.Decoder) throws
}
public struct DuChatBotAccountContract {
  public let number: Swift.String
  public let name: Swift.String
  public let type: DuChatBot.DuChatBotContractType?
}
public struct DuChatBotAccount {
  public let customerCode: Swift.String
  public let contracts: [DuChatBot.DuChatBotAccountContract]
}
public protocol DuParsingEngineDelegate : AnyObject {
  func parsingEngine(_ parsingEngine: DuChatBot.DuParsingEngine, didParseActivityWithResult result: DuChatBot.DuChatBotParseResult)
  func parsingEngine(_ parsingEngine: DuChatBot.DuParsingEngine, didFailToParseActivityWithError error: Swift.Error)
}
public class DuParsingEngine : BSChatBotClient.ParsingEngine {
  weak public var delegate: DuChatBot.DuParsingEngineDelegate?
  public init()
  public func parse(json: [Swift.String : Any], forId id: Swift.String, watermark: Swift.Int?)
  @objc deinit
}
public struct DuChatBotButton : Swift.Decodable {
  public let id: Swift.String
  public let title: Swift.String?
  public let data: Swift.String?
  public init(from decoder: Swift.Decoder) throws
}
public struct DuButtonsParseResult {
  public let text: Swift.String
  public let buttons: [DuChatBot.DuChatBotButton]
  public let suggestedActions: [DuChatBot.DuChatBotSuggestedAction]
  public let watermark: Swift.Int?
  public let locale: DuChatBot.DuChatBotLocale
}
public enum DuChatBotConfigurator {
  public enum DuChatBotEnvironment {
    case tqc
    case previewMajor
    case previewMinor
    case production
    public static func == (a: DuChatBot.DuChatBotConfigurator.DuChatBotEnvironment, b: DuChatBot.DuChatBotConfigurator.DuChatBotEnvironment) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  public static func configure(with environment: DuChatBot.DuChatBotConfigurator.DuChatBotEnvironment)
}
public struct DuConfirmVASUnsubscriptionParseResult {
  public let value: DuChatBot.DuChatBotConfirmVASUnsubscription
  public let buttons: [DuChatBot.DuChatBotButton]
  public let suggestedActions: [DuChatBot.DuChatBotSuggestedAction]
  public let watermark: Swift.Int?
  public let locale: DuChatBot.DuChatBotLocale
}
public struct DuChatBotOrder {
  public let number: Swift.String
  public let date: Swift.String
  public let status: Swift.String
}
public struct DuChatBotSuggestedAction : Swift.Codable {
  public let title: Swift.String
  public let value: Swift.String
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct DuChatBotRechargeHistory {
  public let amount: Swift.String
  public let source: Swift.String
  public let date: Swift.String
  public let time: Swift.String
}
public struct DuObjectParseResult<T> {
  public let value: T
  public let suggestedActions: [DuChatBot.DuChatBotSuggestedAction]
  public let watermark: Swift.Int?
  public let locale: DuChatBot.DuChatBotLocale
}
public struct DuChatBotPaymentHistory {
  public let date: Swift.String
  public let source: Swift.String
  public let amount: Swift.String
}
extension DuChatBot.DuChatBotLocale : Swift.Equatable {}
extension DuChatBot.DuChatBotLocale : Swift.Hashable {}
extension DuChatBot.DuChatBotLocale : Swift.RawRepresentable {}
extension DuChatBot.DuChatBotContractType : Swift.Equatable {}
extension DuChatBot.DuChatBotContractType : Swift.Hashable {}
extension DuChatBot.DuChatBotContractType : Swift.RawRepresentable {}
extension DuChatBot.DuChatBotConfigurator.DuChatBotEnvironment : Swift.Equatable {}
extension DuChatBot.DuChatBotConfigurator.DuChatBotEnvironment : Swift.Hashable {}
